/*
* This file is part of the Leontief distribution (https://github.com/open-risk/leontief).
* Copyright (c) 2024 - 2025 Open Risk (https://www.openriskmanagement.com)
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, version 3.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

#include <iostream>
#include "utils/csv.h"
#include "utils/scan_matrix.h"
#include "core/io_system.h"

/*
 * # EXAMPLE 8: CHECK IO Balance
 */

/**
 * Load the matrices from a csv file
 * Construct A matrix from Z and X (calc from z - mode 2)
 *
 */

using namespace csv;

int main(int num_args, char **arg_strings) {

    constexpr int ROWS = 4053; // csv row dimension (not used by csvreadr)
    constexpr int COLS = 4537; // csv col dimension
    int n = 4050; // total sectors
    int fd = 486; // final demand types
    int va = 2; // value added types

    Eigen::MatrixXd Z(n, n);      // n x n transactions matrix
    Eigen::MatrixXd FD(n, fd);    // n x fd final demand matrix
    Eigen::MatrixXd VA(va, n + fd);    // va x n value added matrix
    Eigen::VectorXd X(n);   // output column vector

    CSVFormat format;
    format.delimiter(',').no_header();
    /**
     * @brief The input file is generated by the script clean_oecd-icio.sh
     */
    CSVReader reader("../data/oecd-2017-2022/icio.csv", format);

    double value;
    int i = 0;
    for (auto &row: reader) {
        for (int j = 0; j < COLS; j++) {
            value = row[j].get<double>();
            if (i < n && j < n) {
                Z(i, j) = value;
            } else if (i < n && j < COLS - 1 && j >= n) {
                FD(i, j - n) = value;
            } else if (i < n && j == COLS - 1) {
                X(i) = value;
            } else if (i >= ROWS - va - 1  && i < ROWS - 1 && j < COLS - 1) {
                VA(i - n, j) = value;
            } else if (i == ROWS - 1 && j < n) {
                // Or(j) = value;
            }
        }
        i++;
    }

    Eigen::VectorXd E;
    E.resizeLike(X);
    E.setZero();

    std::cout << "Step 1: Read Data" << std::endl;
    IOSystem MyIO = IOSystem(Z, X, E, 2);
    std::cout << "Step 2: Initialize System" << std::endl;
    MyIO.calc_from_z2();
    std::cout << "Step 3: Calculate" << std::endl;

}
