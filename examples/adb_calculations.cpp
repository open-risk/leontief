/*
* This file is part of the Leontief distribution (https://github.com/open-risk/leontief).
* Copyright (c) 2024 - 2025 Open Risk (https://www.openriskmanagement.com)
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, version 3.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

#include <iostream>
#include "utils/csv.h"
#include "utils/scan_matrix.h"
#include "core/io_system.h"

/*
 * # EXAMPLE 9: Work with ADB IO system
 */

/**
 * Load the matrices from multipe csv files
 * TODO Construct A matrix from Z and X
 *
 */

using namespace csv;

int main(int num_args, char **arg_strings) {

    int n = 2625; // total sectors
    int fd = 375; // final demand types
    int va = 6; // value added types

    Eigen::MatrixXd Z(n, n);      // n x n transactions matrix
    Eigen::MatrixXd FD(n, fd);    // n x fd final demand matrix
    Eigen::MatrixXd VA(va, n + fd);    // va x n value added matrix
    Eigen::VectorXd X(n);   // output column vector

    double value;
    CSVFormat format;
    format.delimiter(',').no_header();
    /**
     * @brief The input files are generated by the script parse_adb.py
     */

    CSVReader reader1("../data/adb/Z.csv", format);
    int i = 0;
    for (auto &row: reader1) {
        for (int j = 0; j < n; j++) {
            value = row[j].get<double>();
            Z(i, j) = value;
        }
        i++;
    }

    CSVReader reader2("../data/adb/FD.csv", format);
    i = 0;
    for (auto &row: reader2) {
        for (int j = 0; j < fd; j++) {
            value = row[j].get<double>();
            FD(i, j) = value;
        }
        i++;
    }

    CSVReader reader3("../data/adb/VA.csv", format);
    i = 0;
    for (auto &row: reader3) {
        for (int j = 0; j < n + fd; j++) {
            value = row[j].get<double>();
            VA(i, j) = value;
        }
        i++;
    }

    CSVReader reader4("../data/adb/X.csv", format);
    i = 0;
    for (auto &row: reader4) {
        for (int j = 0; j < 1; j++) {
            value = row[0].get<double>();
            X(i) = value;
        }
        i++;
    }

    std::cout << "Step 1: Read Data" << std::endl;

//    Eigen::VectorXd E;
//    E.resizeLike(X);
//    E.setZero();
//    IOSystem MyIO = IOSystem(Z, X, E, 2);
//    std::cout << "Step 2: Initialize System" << std::endl;
//    MyIO.calc_from_z2();
//    std::cout << "Step 3: Calculate" << std::endl;

}
