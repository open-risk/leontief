name: C/C++ CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: üîç Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
      id: checkout

    - name: üõ†Ô∏è System Information
      run: |
        echo "::group::System Details"
        echo "Operating System: $(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)"
        echo "Kernel Version: $(uname -r)"
        echo "CPU Info:"
        lscpu | grep "Model name"
        echo "Available Disk Space:"
        df -h
        echo "::endgroup::"

    - name: Install dependencies
      run: |
        echo "::group::Dependency Installation"
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          g++ \
          libeigen3-dev \
          libpoco-dev \
          libssl-dev \
          pkg-config

        echo "::endgroup::"

    - name: üì¶ Install Catch2
      run: |
        git clone https://github.com/catchorg/Catch2.git
        cd Catch2
        cmake -Bbuild -H. -DBUILD_TESTING=OFF \
          -DCMAKE_PREFIX_PATH=/usr/local/lib/cmake/Catch2 \
          -DCatch2_DIR=/usr/local/lib/cmake/Catch2
        sudo cmake --build build --target install
        cd ..

    - name: üî¨ Verify CMake, g++, Poco and Catch2 Dependencies
      run: |
        echo "Installed Packages and versions:"
        dpkg -l | grep -E 'cmake|g\+\+|poco|catch2'
        export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/lib/pkgconfig
        echo "Poco version: $(pkg-config --modversion poco)"

    - name: üî¨ Verify Eigen Installation
      id: eigen_check
      run: |
        echo "::group::Eigen Verification"
        dpkg -l | grep -E 'eigen'
        EIGEN_VERSION=$(pkg-config --modversion eigen3)
        echo "Eigen Version: $EIGEN_VERSION"
        
        # Verify include path
        EIGEN_INCLUDE_PATH=$(pkg-config --cflags eigen3)
        echo "Eigen Include Path: $EIGEN_INCLUDE_PATH"
        
        # Additional verification for Eigen
        echo "#include <Eigen/Dense>" > eigen_test.cpp
        echo "int main() { return 0; }" >> eigen_test.cpp
        g++ -I/usr/include/eigen3 eigen_test.cpp -o eigen_test
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ Eigen compilation test passed"
        else
          echo "‚ùå Eigen compilation test failed"
          exit 1
        fi
        echo "::endgroup::"

    - name: üèóÔ∏è Configure CMake
      id: cmake_config
      run: |
        echo "::group::CMake Configuration"
        cmake --version
        
        cmake -B ${{github.workspace}}/build \
              -DCMAKE_BUILD_TYPE=Debug \
              -DCMAKE_VERBOSE_MAKEFILE=ON \
              -DEIGEN3_INCLUDE_DIR=/usr/include/eigen3
        
        echo "CMake Configuration Complete"
        echo "Build Directory Contents:"
        ls -la ${{github.workspace}}/build
        echo "::endgroup::"

    - name: üî® Build Project
      id: build
      run: |
        echo "::group::Compilation"
        cmake --build ${{github.workspace}}/build \
              --target leontief.dbg \
              --config Debug \
              -- VERBOSE=1
        
        # Check build artifacts
        echo "Build Artifacts:"
        find ${{github.workspace}}/build -type f -executable
        echo "::endgroup::"


    - name: üö¶ Verify Executable
      id: verify_executable
      run: |
        echo "::group::Executable Verification"
        EXECUTABLE_PATH="${{github.workspace}}/build/leontief.dbg"
        
        if [ -x "$EXECUTABLE_PATH" ]; then
          echo "‚úÖ Executable found at $EXECUTABLE_PATH"
        else
          echo "‚ùå Executable not found at $EXECUTABLE_PATH"
        fi
        echo "::endgroup::"
